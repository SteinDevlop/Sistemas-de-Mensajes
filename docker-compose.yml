services:
  # ==========================
  # üêá RabbitMQ (mensajer√≠a)
  # ==========================
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASS}
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6
    restart: unless-stopped

  # ==========================
  # üêò PostgreSQL (base de datos)
  # ==========================
  db:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    restart: unless-stopped

  # ==========================
  # üß∞ Adminer (UI para PostgreSQL)
  # ==========================
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - db

  # ==========================
  # üå§ Producer (env√≠a datos)
  # ==========================
  producer:
    build:
      context: ./src/app/services/producers_service
    depends_on:
      - rabbitmq
    environment:
      - RABBIT_USER=${RABBIT_USER}
      - RABBIT_PASS=${RABBIT_PASS}
      - RABBITMQ_HOST=rabbitmq
    restart: on-failure

  # ==========================
  # üå¶ Consumer (recibe y guarda)
  # ==========================
  consumer:
    build:
      context: ./src/app/services/consumers_service
    depends_on:
      - rabbitmq
    environment:
      - RABBIT_USER=${RABBIT_USER}
      - RABBIT_PASS=${RABBIT_PASS}
      - RABBITMQ_HOST=rabbitmq
    restart: on-failure

# ==========================
# Vol√∫menes persistentes
# ==========================
volumes:
  rabbitmq_data:
  postgres_data: